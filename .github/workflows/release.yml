name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version to publish (e.g., v0.1.0)"
        required: true
        type: string

jobs:
  check-draft:
    name: Check Release Draft
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      draft_exists: ${{ steps.check.outputs.draft_exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if draft release exists
        id: check
        run: |
          # Check if the specified version exists and is a draft
          if ! gh release view "${{ github.event.inputs.version }}" --json isDraft --jq '.isDraft' 2>/dev/null | grep -q true; then
            echo "Error: Draft release ${{ github.event.inputs.version }} not found or not a draft"
            echo "Available draft releases:"
            gh release list --limit 100 | grep "Draft" || echo "No draft releases found"
            exit 1
          fi
          echo "Found draft release: ${{ github.event.inputs.version }}"
          echo "draft_exists=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare-release:
    name: Prepare Release
    needs: check-draft
    runs-on: ubuntu-latest
    outputs:
      no_prefix_version: ${{ steps.create_no_prefix_version_string.outputs.no_prefix_version }}
    steps:
      - name: Create no prefix version string
        id: create_no_prefix_version_string
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Remove the "v" prefix if it exists in semantic versioning format
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            NO_PREFIX_VERSION="${VERSION#v}"
          else
            NO_PREFIX_VERSION="$VERSION"
          fi
          echo "no_prefix_version=$NO_PREFIX_VERSION" >> "$GITHUB_OUTPUT"

  validate-versions:
    name: Validate Version Consistency
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check version consistency
        run: |
          EXPECTED_VERSION="${{ needs.prepare-release.outputs.no_prefix_version }}"
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          MANIFEST_VERSION=$(jq -r '.version' manifest.json)
          echo "Expected version: $EXPECTED_VERSION"
          echo "package.json version: $PACKAGE_VERSION"
          echo "manifest.json version: $MANIFEST_VERSION"

          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ] || [ "$MANIFEST_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "ERROR: Version mismatch detected. Please update the versions to $EXPECTED_VERSION"
            exit 1
          fi

          echo "All versions are consistent!"

  publish-docker-image:
    name: Publish Docker Image
    needs:
      - check-draft
      - prepare-release
      - validate-versions
    if: needs.check-draft.outputs.draft_exists == 'true'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/reusable-publish-image.yml
    with:
      tags: "${{ needs.prepare-release.outputs.no_prefix_version }},latest"
      push: true

  publish-release:
    name: Publish Release
    needs:
      - check-draft
      - validate-versions
    if: needs.check-draft.outputs.draft_exists == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Publish release with Release Drafter
        uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5 # v6.1.0
        with:
          version: ${{ github.event.inputs.version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
